{
  "name": "gulp-scsslint",
  "description": "SCSS-Lint plugin for gulp",
  "version": "0.0.4",
  "main": "./src/index.js",
  "homepage": "http://github.com/noahmiller/gulp-scsslint",
  "repository": {
    "type": "git",
    "url": "git://github.com/noahmiller/gulp-scsslint.git"
  },
  "bugs": {
    "url": "https://github.com/noahmiller/gulp-scsslint/issues"
  },
  "author": {
    "name": "Noah Miller",
    "email": "noahhmiller@gmail.com"
  },
  "keywords": [
    "gulp",
    "gulpplugin",
    "scss",
    "lint",
    "scss-lint"
  ],
  "dependencies": {
    "chalk": "^0.4.0",
    "event-stream": "^3.1.5",
    "gulp-util": "^2.2.14",
    "map-stream": "^0.1.0",
    "xml2js": "^0.4.2"
  },
  "devDependencies": {
    "mocha": "^1.18.2",
    "should": "^3.3.1"
  },
  "scripts": {
    "test": "mocha"
  },
  "engineStrict": true,
  "engines": {
    "node": ">= 0.10"
  },
  "license": "MIT",
  "readme": "# gulp-scsslint\n\n[![Build Status](https://travis-ci.org/noahmiller/gulp-scsslint.svg?branch=master)](https://travis-ci.org/noahmiller/gulp-scsslint)\n\n> [SCSS-Lint](https://github.com/causes/scss-lint) plugin for [gulp](http://gulpjs.com).\n\n[scss-lint](https://github.com/causes/scss-lint) is a Ruby gem written by\n[The Causes Engineering Team](https://github.com/causes).\nThis plugin wraps the scss-lint binary for gulp and provides\ndefault and failure reporters.\n\n\n## Install\n\n    npm install gulp-scsslint --save-dev\n\nThis plugin requires [Ruby](http://www.ruby-lang.org/en/downloads/)\nand [scss-lint](https://github.com/causes/scss-lint#installation)\nto be installed. If you're on OS X or Linux you probably already have\nRuby installed.\n\nFrom a terminal:\n\n```sh\nruby -v # test that Ruby is installed\ngem update --system && gem install scss-lint\n```\n\n## Usage\n\n```javascript\nvar scsslint = require('gulp-scsslint');\nvar gulp = require('gulp');\n\ngulp.task('lint', function() {\n  gulp.src('./styles/*.scss')\n    .pipe(scsslint())\n    .pipe(scsslint.reporter());\n});\n```\n\n## API\n\n### scsslint(configFile)\n\n#### configFile\nType: `String`\n\nYou can pass the path to your .scss-lint.yml file directly to the plugin,\nthough if your config file uses the standard file name and location\nthen SCSS-Lint will find it by default.\n\n```javascript\ngulp.src('./styles/*.scss')\n  .pipe(scsslint('my-scss-lint.yml'))\n});\n```\n\n### scsslint(options)\n\n#### options\nType: `Object`\n\n##### `config`\n\nPath to your .scss-lint.yml file.  Default is `undefined`.\n\n##### `bin`\n\nThe scss-lint call signature.  Default is `scss-lint`.  In the context of\nbundler, `bundle exec scss-lint` might be preferable.\n\n## Results\n\nAdds the following properties to the file object:\n\n```javascript\n  file.scsslint.success = true; // or false\n  file.scsslint.errorCount = 0; // number of errors returned by SCSS-Lint\n  file.scsslint.results = []; // SCSS-Lint errors\n```\n\nThe objects in `results` have all the properties of the `issue` tags in\nSCSS-Lint's [XML output](https://github.com/causes/scss-lint#xml), for example:\n\n```javascript\nfile.scsslint.results = [{\n  'line': 123,\n  'column': 10,\n  'severity': 'warning', // or `error`\n  'reason': 'a description of the error'\n}]\n```\n\n## Reporters\n\n### Default\n\nThe default reporter logs SCSS-Lint warnings and errors using a format\nsimilar to SCSS-Lint's default.\n\n```javascript\nstuff\n  .pipe(scsslint())\n  .pipe(scsslint.reporter())\n```\n\nExample output:\n\n```\ntest/fixtures/error.scss:3 [E] Invalid CSS after \"  font\": expected \";\", was \":\"\ntest/fixtures/warning.scss:2 [W] Color `black` should be written in hexadecimal form as `#000`\n```\n\n### Fail Reporter\n\nBy default, only program errors cause errors to be emitted on the stream.\nIf you would also like SCSS-Lint warnings and errors to cause errors to be\nemitted on the stream (for example, to fail the build on a CI server),\nuse the 'fail' reporter.\n\nThis example will log the errors using the default reporter, then fail\nif SCSS-Lint found any issues in the SCSS.\n\n```javascript\nstuff\n  .pipe(scsslint())\n  .pipe(scsslint.reporter())\n  .pipe(scsslint.reporter('fail'))\n```\n\n### Custom Reporters\n\nCustom reporter functions can be passed as scsslint.reporter(reporterFunc).\nThe reporter function will be called for each linted file that includes\nan error or warning and passed the file object as described above.\n\nIf the custom reporter returns non-falsey, the returned value will be\nprovided to the stream callback and will generate an error.\n\n```javascript\nvar scsslint = require('gulp-scsslint');\nvar gulp = require('gulp');\nvar gutil = require('gulp-util');\n\nvar myReporter = function(file) {\n  gutil.log(file.scsslint.errorCount + ' errors');\n};\n\ngulp.task('lint', function() {\n  return gulp.src('./styles/*.scss')\n    .pipe(scsslint())\n    .pipe(scsslint.reporter(myReporter));\n});\n```\n\nSee `src/reports.js` for more detailed examples.\n",
  "readmeFilename": "README.md",
  "_id": "gulp-scsslint@0.0.4",
  "_from": "gulp-scsslint@0.0.4"
}
